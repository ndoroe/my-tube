version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mytube_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mytube}
      POSTGRES_USER: ${POSTGRES_USER:-mytube_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - mytube_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mytube_user} -d ${POSTGRES_DB:-mytube}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: mytube_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mytube_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mytube_backend
    restart: unless-stopped
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-change-this-secret-key}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-jwt-secret}
      DATABASE_URL: postgresql://${POSTGRES_USER:-mytube_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-mytube}
      REDIS_URL: redis://redis:6379/0
      UPLOAD_FOLDER: /app/uploads
      MAX_CONTENT_LENGTH: ${MAX_CONTENT_LENGTH:-2147483648}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-mytube}
      POSTGRES_USER: ${POSTGRES_USER:-mytube_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - uploads_data:/app/uploads
      - ./backend:/app
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mytube_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/auth/me"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker for Video Processing
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mytube_celery_worker
    restart: unless-stopped
    command: celery -A run.celery worker --loglevel=info --concurrency=2
    environment:
      FLASK_ENV: ${FLASK_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-mytube_user}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-mytube}
      REDIS_URL: redis://redis:6379/0
      UPLOAD_FOLDER: /app/uploads
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-mytube}
      POSTGRES_USER: ${POSTGRES_USER:-mytube_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - uploads_data:/app/uploads
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mytube_network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    container_name: mytube_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - mytube_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mytube_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - uploads_data:/var/www/uploads:ro
      - ssl_certs:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - mytube_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  ssl_certs:
    driver: local

networks:
  mytube_network:
    driver: bridge
